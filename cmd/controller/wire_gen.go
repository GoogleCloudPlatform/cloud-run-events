// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"cloud.google.com/go/iam/admin/apiv1"
	"context"
	"github.com/google/knative-gcp/pkg/reconciler/events/auditlogs"
	"github.com/google/knative-gcp/pkg/reconciler/events/build"
	"github.com/google/knative-gcp/pkg/reconciler/events/pubsub"
	"github.com/google/knative-gcp/pkg/reconciler/events/scheduler"
	"github.com/google/knative-gcp/pkg/reconciler/events/storage"
	"github.com/google/knative-gcp/pkg/reconciler/identity/iam"
	"github.com/google/knative-gcp/pkg/reconciler/messaging/channel"
	"github.com/google/knative-gcp/pkg/reconciler/pubsub/pullsubscription/keda"
	"github.com/google/knative-gcp/pkg/reconciler/pubsub/pullsubscription/static"
	"github.com/google/knative-gcp/pkg/reconciler/pubsub/topic"
	"knative.dev/pkg/injection"
)

import (
	_ "k8s.io/client-go/plugin/pkg/client/auth/gcp"
)

// Injectors from wire.go:

func InitializeControllers(ctx context.Context) ([]injection.ControllerConstructor, error) {
	v := ClientOptions()
	iamClient, err := admin.NewIamClient(ctx, v...)
	if err != nil {
		return nil, err
	}
	iamPolicyManager, err := iam.NewIAMPolicyManager(ctx, iamClient)
	if err != nil {
		return nil, err
	}
	constructor := auditlogs.NewConstructor(iamPolicyManager)
	storageConstructor := storage.NewConstructor(iamPolicyManager)
	schedulerConstructor := scheduler.NewConstructor(iamPolicyManager)
	pubsubConstructor := pubsub.NewConstructor(iamPolicyManager)
	buildConstructor := build.NewConstructor(iamPolicyManager)
	staticConstructor := static.NewConstructor(iamPolicyManager)
	kedaConstructor := keda.NewConstructor(iamPolicyManager)
	topicConstructor := topic.NewConstructor(iamPolicyManager)
	channelConstructor := channel.NewConstructor(iamPolicyManager)
	v2 := Controllers(constructor, storageConstructor, schedulerConstructor, pubsubConstructor, buildConstructor, staticConstructor, kedaConstructor, topicConstructor, channelConstructor)
	return v2, nil
}
