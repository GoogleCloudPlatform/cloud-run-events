// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"context"
	"github.com/google/knative-gcp/pkg/broker/control"
	"github.com/google/knative-gcp/pkg/broker/ingress"
	"github.com/google/knative-gcp/pkg/metrics"
	"github.com/google/knative-gcp/pkg/utils/clients"
)

// Injectors from wire.go:

func InitializeHandler(ctx context.Context, port clients.Port, projectID clients.ProjectID, podName metrics.PodName, containerName metrics.ContainerName, brokerControlAddress clients.BrokerControlAddress, brokercellName control.BrokercellName) (*ingress.Handler, error) {
	httpMessageReceiver := clients.NewHTTPMessageReceiver(port)
	brokerControlClientConn, err := clients.NewBrokerControlClientConn(brokerControlAddress)
	if err != nil {
		return nil, err
	}
	brokerControlClient := clients.NewBrokerControlClient(brokerControlClientConn)
	brokerWatch, err := control.NewBrokerWatch(ctx, brokercellName, brokerControlClient)
	if err != nil {
		return nil, err
	}
	client, err := clients.NewPubsubClient(ctx, projectID)
	if err != nil {
		return nil, err
	}
	multiTopicDecoupleSink := ingress.NewMultiTopicDecoupleSink(ctx, brokerWatch, client)
	ingressReporter, err := metrics.NewIngressReporter(podName, containerName)
	if err != nil {
		return nil, err
	}
	handler := ingress.NewHandler(ctx, httpMessageReceiver, multiTopicDecoupleSink, ingressReporter)
	return handler, nil
}
