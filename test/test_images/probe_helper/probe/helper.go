/*
Copyright 2020 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package probe

import (
	"context"
	"fmt"
	"net"
	"net/http"
	"strings"
	"time"

	"cloud.google.com/go/pubsub"
	"cloud.google.com/go/storage"
	cepubsub "github.com/cloudevents/sdk-go/protocol/pubsub/v2"
	cloudevents "github.com/cloudevents/sdk-go/v2"
	cehttp "github.com/cloudevents/sdk-go/v2/protocol/http"
	"go.uber.org/zap"

	"knative.dev/pkg/logging"

	schemasv1 "github.com/google/knative-gcp/pkg/schemas/v1"
	"github.com/google/knative-gcp/test/test_images/probe_helper/utils"
)

const (
	// This is the CloudEvent extension which holds the timeout duration of the forward client.
	probeEventTimeoutExtension = "timeout"

	// This is the pair of CloudEvent extensions which hold the path of probe requests.
	// The path of receiver probe requests is injected into the receiverpath extension
	// by the receiver client. The corresponding forward probe requests should include
	// the targetpath extension with the same path. For example:
	//
	// If a source is configured to sink events to:
	//   http://probe-helper-receiver.cloud-run-events-probe.svc.cluster.local/some-path-goes-here
	//
	// then, each event generated by the source and passed to the probe helper
	// receiver client will include the header 'Ce-Receiverpath: /some-path-goes-here'.
	// And in order for the probe to succeed, the corresponding forward probe should
	// be made to include the header 'Ce-Targetpath: /some-path-goes-here'.
	probeEventTargetPathExtension   = "targetpath"
	probeEventReceiverPathExtension = "receiverpath"
)

var (
	probeEventTargetPathHeader   = "Ce-" + strings.Title(probeEventTargetPathExtension)
	probeEventReceiverPathHeader = "Ce-" + strings.Title(probeEventReceiverPathExtension)
)

// withProbeTimeout returns a context with a timeout specified from the 'timeout'
// extension of a given CloudEvent, defaulting to a certain value if not specified,
// and capped to a maximum.
func (ph *Helper) withProbeTimeout(ctx context.Context, event cloudevents.Event) (context.Context, context.CancelFunc) {
	timeout := ph.DefaultTimeoutDuration
	if _, ok := event.Extensions()[probeEventTimeoutExtension]; ok {
		customTimeoutExtension := fmt.Sprint(event.Extensions()[probeEventTimeoutExtension])
		if customTimeout, err := time.ParseDuration(customTimeoutExtension); err != nil {
			logging.FromContext(ctx).Warnw("Failed to parse custom timeout extension duration", zap.String("timeout", customTimeoutExtension), zap.Error(err))
		} else {
			timeout = customTimeout
		}
	}
	if timeout.Nanoseconds() > ph.MaxTimeoutDuration.Nanoseconds() {
		logging.FromContext(ctx).Warnw("Desired timeout exceeds the maximum, clamping to maximum value", zap.Duration("timeout", timeout), zap.Duration("maximumTimeout", ph.MaxTimeoutDuration))
		timeout = ph.MaxTimeoutDuration
	}
	return context.WithTimeout(ctx, timeout)
}

// withProbeEventLoggingContext attaches a logger to the context which contains
// useful information about probe requests.
func withProbeEventLoggingContext(ctx context.Context, event cloudevents.Event) context.Context {
	logger := logging.FromContext(ctx)
	logger = logger.With(zap.Any("event", map[string]interface{}{
		"id":          event.ID(),
		"source":      event.Source(),
		"specversion": event.SpecVersion(),
		"type":        event.Type(),
		"extensions":  event.Extensions(),
	}))
	return logging.WithLogger(ctx, logger)
}

type cloudEventsFunc func(cloudevents.Event) cloudevents.Result

// forwardFromProbe is the base forward probe request handler which is called
// whenever the probe helper receives a CloudEvent through port PROBE_PORT or
// through the specified probe port listener.
func (ph *Helper) forwardFromProbe(ctx context.Context) cloudEventsFunc {
	return func(event cloudevents.Event) cloudevents.Result {
		// Attach important metadata about the event to the logging context.
		ctx := withProbeEventLoggingContext(ctx, event)
		logging.FromContext(ctx).Infow("Received probe request")

		// Refresh the forward probe liveness time
		ph.lastForwardEventTime.SetNow()

		// Retrieve the probe handler based on the event type
		pr, ok := ph.forwardProbeHandlers[event.Type()]
		if !ok {
			logging.FromContext(ctx).Warnw("Probe forwarding failed, unrecognized forward probe type")
			return cloudevents.ResultNACK
		}

		// Ensure there is a targetpath CloudEvent extension
		if _, ok := event.Extensions()[probeEventTargetPathExtension]; !ok {
			logging.FromContext(ctx).Warnf("Probe forwarding failed, forward probe event missing '%s' extension", probeEventTargetPathExtension)
			return cloudevents.ResultNACK
		}

		// Add timeout to the context
		ctx, cancel := ph.withProbeTimeout(ctx, event)
		defer cancel()

		// Forward the probe event. This call is likely to be blocking.
		if err := pr.Forward(ctx, event); err != nil {
			logging.FromContext(ctx).Warnw("Probe forwarding failed", zap.Error(err))
			return cloudevents.ResultNACK
		}
		return cloudevents.ResultACK
	}
}

// receiveEvent is the base receiver probe request handler which is called
// whenever the probe helper receives a CloudEvent through port RECEIVER_PORT or
// through the specified receiver port listener.
func (ph *Helper) receiveEvent(ctx context.Context) cloudEventsFunc {
	return func(event cloudevents.Event) cloudevents.Result {
		// Attach important metadata about the event to the logging context.
		ctx := withProbeEventLoggingContext(ctx, event)
		logging.FromContext(ctx).Infow("Received event")

		// Refresh the receiver probe liveness time
		ph.lastReceiverEventTime.SetNow()

		// Retrieve the probe handler based on the event type
		pr, ok := ph.receiveProbeHandlers[event.Type()]
		if !ok {
			logging.FromContext(ctx).Warnw("Probe receiver failed, unrecognized receive probe type")
			return cloudevents.ResultNACK
		}

		// Ensure there is a receiverpath CloudEvent extension
		if _, ok := event.Extensions()[probeEventReceiverPathExtension]; !ok {
			logging.FromContext(ctx).Warnf("Probe receiver failed, receiver probe event missing '%s' extension", probeEventReceiverPathExtension)
			return cloudevents.ResultNACK
		}

		// Receive the probe event
		if err := pr.Receive(ctx, event); err != nil {
			logging.FromContext(ctx).Warnw("Probe receiver failed", zap.Error(err))
			return cloudevents.ResultNACK
		}
		return cloudevents.ResultACK
	}
}

// CheckLastEventTimes returns an actionFunc which checks the delay between the
// current time and last processed event times from the forward and receiver
// clients. This handler is used by the liveness checker to declare the liveness
// status of the probe helper.
func (ph *Helper) CheckLastEventTimes() func(context.Context) error {
	return func(ctx context.Context) error {
		// If either of the forward or receiver clients are not processing events, something is wrong
		now := time.Now()
		if delay := now.Sub(ph.lastForwardEventTime.Get()); delay > ph.LivenessStaleDuration {
			return fmt.Errorf("forward delay %s exceeds staleness threshold %s", delay, ph.LivenessStaleDuration)
		}
		if delay := now.Sub(ph.lastReceiverEventTime.Get()); delay > ph.LivenessStaleDuration {
			return fmt.Errorf("receiver delay %s exceeds staleness threshold %s", delay, ph.LivenessStaleDuration)
		}
		return nil
	}
}

func (ph *Helper) initializeHandlers() {
	// Create each probe handler object
	brokerE2EDeliveryProbe := &BrokerE2EDeliveryProbe{
		brokerCellIngressBaseURL: ph.BrokerCellIngressBaseURL,
		client:                   ph.CeForwardClient,
		receivedEvents: utils.SyncReceivedEvents{
			Channels: map[string]chan bool{},
		},
	}
	cloudPubSubSourceProbe := &CloudPubSubSourceProbe{
		cePubsubClient: ph.CePubsubClient,
		receivedEvents: utils.SyncReceivedEvents{
			Channels: map[string]chan bool{},
		},
	}
	cloudStorageSourceProbe := &CloudStorageSourceProbe{
		storageClient: ph.StorageClient,
		receivedEvents: utils.SyncReceivedEvents{
			Channels: map[string]chan bool{},
		},
	}
	cloudStorageSourceCreateProbe := &CloudStorageSourceCreateProbe{
		CloudStorageSourceProbe: cloudStorageSourceProbe,
	}
	cloudStorageSourceUpdateMetadataProbe := &CloudStorageSourceUpdateMetadataProbe{
		CloudStorageSourceProbe: cloudStorageSourceProbe,
	}
	cloudStorageSourceArchiveProbe := &CloudStorageSourceArchiveProbe{
		CloudStorageSourceProbe: cloudStorageSourceProbe,
	}
	cloudStorageSourceDeleteProbe := &CloudStorageSourceDeleteProbe{
		CloudStorageSourceProbe: cloudStorageSourceProbe,
	}
	cloudAuditLogsSourceProbe := &CloudAuditLogsSourceProbe{
		projectID:    ph.ProjectID,
		pubsubClient: ph.PubsubClient,
		receivedEvents: utils.SyncReceivedEvents{
			Channels: map[string]chan bool{},
		},
	}
	// The liveness checker should share the scheduler event times with the CloudSchedulerSource probe Handler.
	cloudSchedulerSourceProbe := &CloudSchedulerSourceProbe{
		EventTimes: utils.SyncTimesMap{
			Times: map[string]time.Time{},
		},
	}
	ph.livenessChecker.AddActionFunc(cloudSchedulerSourceProbe.CleanupStaleSchedulerTimes())

	// Set the forward and receiver probe handlers now that they are initialized.
	ph.forwardProbeHandlers = map[string]Handler{
		BrokerE2EDeliveryProbeEventType:                brokerE2EDeliveryProbe,
		CloudPubSubSourceProbeEventType:                cloudPubSubSourceProbe,
		CloudStorageSourceCreateProbeEventType:         cloudStorageSourceCreateProbe,
		CloudStorageSourceUpdateMetadataProbeEventType: cloudStorageSourceUpdateMetadataProbe,
		CloudStorageSourceArchiveProbeEventType:        cloudStorageSourceArchiveProbe,
		CloudStorageSourceDeleteProbeEventType:         cloudStorageSourceDeleteProbe,
		CloudAuditLogsSourceProbeEventType:             cloudAuditLogsSourceProbe,
		CloudSchedulerSourceProbeEventType:             cloudSchedulerSourceProbe,
	}
	ph.receiveProbeHandlers = map[string]Handler{
		BrokerE2EDeliveryProbeEventType:                      brokerE2EDeliveryProbe,
		schemasv1.CloudPubSubMessagePublishedEventType:       cloudPubSubSourceProbe,
		schemasv1.CloudStorageObjectFinalizedEventType:       cloudStorageSourceCreateProbe,
		schemasv1.CloudStorageObjectMetadataUpdatedEventType: cloudStorageSourceUpdateMetadataProbe,
		schemasv1.CloudStorageObjectArchivedEventType:        cloudStorageSourceArchiveProbe,
		schemasv1.CloudStorageObjectDeletedEventType:         cloudStorageSourceDeleteProbe,
		schemasv1.CloudAuditLogsLogWrittenEventType:          cloudAuditLogsSourceProbe,
		schemasv1.CloudSchedulerJobExecutedEventType:         cloudSchedulerSourceProbe,
	}
}

// Initialize sets up all of the clients and resources used by the probe helper.
// It also initializes all of the probe Handlers, and passes the initialized clients
// to them. This function should be called before calling Run.
func (ph *Helper) Initialize(ctx context.Context) {
	var err error
	logger := logging.FromContext(ctx)

	// initialize the liveness checker
	ph.lastForwardEventTime.SetNow()
	ph.lastReceiverEventTime.SetNow()
	ph.livenessChecker.AddActionFunc(ph.CheckLastEventTimes())

	// create pubsub client
	if ph.PubsubClient == nil {
		ph.PubsubClient, err = pubsub.NewClient(ctx, ph.ProjectID)
		if err != nil {
			logger.Fatalw("Failed to create cloud pubsub client", zap.Error(err))
		}
	}
	if ph.CePubsubClient == nil {
		pst, err := cepubsub.New(ctx,
			cepubsub.WithClient(ph.PubsubClient),
			cepubsub.WithProjectID(ph.ProjectID))
		if err != nil {
			logger.Fatalw("Failed to create pubsub transport", zap.Error(err))
		}
		ph.CePubsubClient, err = cloudevents.NewClient(pst)
		if err != nil {
			logger.Fatalw("Failed to create CloudEvents pubsub client", zap.Error(err))
		}
	}

	// create cloud storage client
	if ph.StorageClient == nil {
		ph.StorageClient, err = storage.NewClient(ctx)
		if err != nil {
			logger.Fatalw("Failed to create cloud storage client", zap.Error(err))
		}
	}

	// create sender client
	if ph.CeForwardClient == nil {
		spOpts := []cehttp.Option{}
		if ph.ProbeListener != nil {
			spOpts = append(spOpts, cloudevents.WithListener(ph.ProbeListener))
		} else {
			spOpts = append(spOpts, cloudevents.WithPort(ph.ProbePort))
		}
		sp, err := cloudevents.NewHTTP(spOpts...)
		if err != nil {
			logger.Fatalw("Failed to create sender transport", zap.Error(err))
		}
		ph.CeForwardClient, err = cloudevents.NewClient(sp)
		if err != nil {
			logger.Fatalw("Failed to create sender client", zap.Error(err))
		}
	}

	// create receiver client
	if ph.CeReceiveClient == nil {
		rpOpts := []cehttp.Option{
			// The liveness probe uses GET requests on the containerPort.
			cloudevents.WithGetHandlerFunc(ph.livenessChecker.LivenessHandlerFunc(ctx)),
			// Inject the receiverpath header into each received CloudEvent.
			cloudevents.WithMiddleware(func(next http.Handler) http.Handler {
				return http.HandlerFunc(func(rw http.ResponseWriter, req *http.Request) {
					req.Header.Set(probeEventReceiverPathHeader, req.URL.Path)
					next.ServeHTTP(rw, req)
				})
			}),
		}
		if ph.ProbeListener != nil {
			rpOpts = append(rpOpts, cloudevents.WithListener(ph.ReceiverListener))
		} else {
			rpOpts = append(rpOpts, cloudevents.WithPort(ph.ReceiverPort))
		}
		rp, err := cloudevents.NewHTTP(rpOpts...)
		if err != nil {
			logger.Fatalw("Failed to create receiver transport", zap.Error(err))
		}
		ph.CeReceiveClient, err = cloudevents.NewClient(rp)
		if err != nil {
			logger.Fatalw("Failed to create receiver client", zap.Error(err))
		}
	}

	// initialize the Handlers
	ph.initializeHandlers()
}

// Run starts the probe forwarder and receiver. This function should be called
// after Initialize.
func (ph *Helper) Run(ctx context.Context) {
	// Start a goroutine to receive the probe request event and forward it appropriately
	logging.FromContext(ctx).Infow("Starting event forwarder client...")
	go ph.CeForwardClient.StartReceiver(ctx, ph.forwardFromProbe(ctx))

	// Receive the event and return the result back to the probe
	logging.FromContext(ctx).Infow("Starting event receiver client...")
	ph.CeReceiveClient.StartReceiver(ctx, ph.receiveEvent(ctx))
}

// Helper is the main probe helper object which contains the metadata and clients
// shared between all probe Handlers.
type Helper struct {
	// The project ID
	ProjectID string

	// The base URL for the BrokerCell Ingress used in the broker delivery probe
	BrokerCellIngressBaseURL string

	// The client responsible for handling forward probe requests
	CeForwardClient cloudevents.Client

	// The client responsible for receiving events
	CeReceiveClient cloudevents.Client

	// The pubsub client wrapped by a CloudEvents client for the CloudPubSubSource
	// probe and used for the CloudAuditLogsSource probe
	PubsubClient *pubsub.Client

	// The CloudEvents client responsible for forwarding events as messages to a
	// topic for the CloudPubSubSource probe.
	CePubsubClient cloudevents.Client

	// The storage client used in the CloudStorageSource
	StorageClient *storage.Client

	// Handle for the bucket used in the CloudStorageSource probe
	Bucket *storage.BucketHandle

	// The port through which the probe helper receives probe requests
	ProbePort int
	// If a listener is specified instead, the port is ignored
	ProbeListener net.Listener

	// The port through which the probe helper receives source events
	ReceiverPort int
	// If a listener is specified instead, the port is ignored
	ReceiverListener net.Listener

	// The default duration after which the probe helper times out after forwarding
	// an event, if no custom timeout duration is specified
	DefaultTimeoutDuration time.Duration

	// The maximum duration after which the probe helper times out after forwarding an event
	MaxTimeoutDuration time.Duration

	// The liveness checker invoked in the liveness probe
	livenessChecker utils.LivenessChecker

	// LivenessStaleDuration represents the tolerated staleness of events processed by the forward and receiver clients in the liveness probe.
	LivenessStaleDuration time.Duration

	// SchedulerStaleDuration represents the tolerated staleness of ticks observed by the CloudSchedulerSource probe.
	SchedulerStaleDuration time.Duration

	// The map from forward probe event types to Handler objects.
	forwardProbeHandlers map[string]Handler

	// The map from receiver probe event types to Handler objects.
	receiveProbeHandlers map[string]Handler

	// lastForwardEventTime is the timestamp of the last event processed by the forward client.
	lastForwardEventTime utils.SyncTime

	// lastReceiverEventTime is the timestamp of the last event processed by the receiver client.
	lastReceiverEventTime utils.SyncTime
}
