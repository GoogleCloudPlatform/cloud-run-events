// Code generated by protoc-gen-go. DO NOT EDIT.
// source: targets.proto

package config

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The state of the target.
// We may add additional intermediate states if needed.
type Target_State int32

const (
	Target_UNKNOWN Target_State = 0
	Target_READY   Target_State = 1
)

var Target_State_name = map[int32]string{
	0: "UNKNOWN",
	1: "READY",
}

var Target_State_value = map[string]int32{
	"UNKNOWN": 0,
	"READY":   1,
}

func (x Target_State) String() string {
	return proto.EnumName(Target_State_name, int32(x))
}

func (Target_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4009e2e15debba2c, []int{0, 0}
}

// Target defines the config schema for a broker subscription target.
type Target struct {
	// The id of the target. E.g. UID of the trigger resource.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the target.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The namespace of the target.
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// The resolved subscriber URI of the target.
	SubscriberUri string `protobuf:"bytes,4,opt,name=subscriber_uri,json=subscriberUri,proto3" json:"subscriber_uri,omitempty"`
	// Optional filters from the trigger.
	FilterAttributes map[string]string `protobuf:"bytes,5,rep,name=filter_attributes,json=filterAttributes,proto3" json:"filter_attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	State            Target_State      `protobuf:"varint,6,opt,name=state,proto3,enum=config.Target_State" json:"state,omitempty"`
	// The Pubsub topic name for retrying the events.
	RetryTopic string `protobuf:"bytes,7,opt,name=retry_topic,json=retryTopic,proto3" json:"retry_topic,omitempty"`
	// The Pubsub subscription name for retrying the events.
	RetrySubscription    string   `protobuf:"bytes,8,opt,name=retry_subscription,json=retrySubscription,proto3" json:"retry_subscription,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Target) Reset()         { *m = Target{} }
func (m *Target) String() string { return proto.CompactTextString(m) }
func (*Target) ProtoMessage()    {}
func (*Target) Descriptor() ([]byte, []int) {
	return fileDescriptor_4009e2e15debba2c, []int{0}
}

func (m *Target) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Target.Unmarshal(m, b)
}
func (m *Target) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Target.Marshal(b, m, deterministic)
}
func (m *Target) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Target.Merge(m, src)
}
func (m *Target) XXX_Size() int {
	return xxx_messageInfo_Target.Size(m)
}
func (m *Target) XXX_DiscardUnknown() {
	xxx_messageInfo_Target.DiscardUnknown(m)
}

var xxx_messageInfo_Target proto.InternalMessageInfo

func (m *Target) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Target) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Target) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *Target) GetSubscriberUri() string {
	if m != nil {
		return m.SubscriberUri
	}
	return ""
}

func (m *Target) GetFilterAttributes() map[string]string {
	if m != nil {
		return m.FilterAttributes
	}
	return nil
}

func (m *Target) GetState() Target_State {
	if m != nil {
		return m.State
	}
	return Target_UNKNOWN
}

func (m *Target) GetRetryTopic() string {
	if m != nil {
		return m.RetryTopic
	}
	return ""
}

func (m *Target) GetRetrySubscription() string {
	if m != nil {
		return m.RetrySubscription
	}
	return ""
}

// NamespacedTargets is the collection of targets grouped by namespaces.
type NamespacedTargets struct {
	Names                map[string]*Target `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *NamespacedTargets) Reset()         { *m = NamespacedTargets{} }
func (m *NamespacedTargets) String() string { return proto.CompactTextString(m) }
func (*NamespacedTargets) ProtoMessage()    {}
func (*NamespacedTargets) Descriptor() ([]byte, []int) {
	return fileDescriptor_4009e2e15debba2c, []int{1}
}

func (m *NamespacedTargets) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NamespacedTargets.Unmarshal(m, b)
}
func (m *NamespacedTargets) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NamespacedTargets.Marshal(b, m, deterministic)
}
func (m *NamespacedTargets) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NamespacedTargets.Merge(m, src)
}
func (m *NamespacedTargets) XXX_Size() int {
	return xxx_messageInfo_NamespacedTargets.Size(m)
}
func (m *NamespacedTargets) XXX_DiscardUnknown() {
	xxx_messageInfo_NamespacedTargets.DiscardUnknown(m)
}

var xxx_messageInfo_NamespacedTargets proto.InternalMessageInfo

func (m *NamespacedTargets) GetNames() map[string]*Target {
	if m != nil {
		return m.Names
	}
	return nil
}

// TargetsConfig is the collection of all Targets.
type TargetsConfig struct {
	Namespaces           map[string]*NamespacedTargets `protobuf:"bytes,1,rep,name=namespaces,proto3" json:"namespaces,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *TargetsConfig) Reset()         { *m = TargetsConfig{} }
func (m *TargetsConfig) String() string { return proto.CompactTextString(m) }
func (*TargetsConfig) ProtoMessage()    {}
func (*TargetsConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_4009e2e15debba2c, []int{2}
}

func (m *TargetsConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TargetsConfig.Unmarshal(m, b)
}
func (m *TargetsConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TargetsConfig.Marshal(b, m, deterministic)
}
func (m *TargetsConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TargetsConfig.Merge(m, src)
}
func (m *TargetsConfig) XXX_Size() int {
	return xxx_messageInfo_TargetsConfig.Size(m)
}
func (m *TargetsConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_TargetsConfig.DiscardUnknown(m)
}

var xxx_messageInfo_TargetsConfig proto.InternalMessageInfo

func (m *TargetsConfig) GetNamespaces() map[string]*NamespacedTargets {
	if m != nil {
		return m.Namespaces
	}
	return nil
}

func init() {
	proto.RegisterEnum("config.Target_State", Target_State_name, Target_State_value)
	proto.RegisterType((*Target)(nil), "config.Target")
	proto.RegisterMapType((map[string]string)(nil), "config.Target.FilterAttributesEntry")
	proto.RegisterType((*NamespacedTargets)(nil), "config.NamespacedTargets")
	proto.RegisterMapType((map[string]*Target)(nil), "config.NamespacedTargets.NamesEntry")
	proto.RegisterType((*TargetsConfig)(nil), "config.TargetsConfig")
	proto.RegisterMapType((map[string]*NamespacedTargets)(nil), "config.TargetsConfig.NamespacesEntry")
}

func init() {
	proto.RegisterFile("targets.proto", fileDescriptor_4009e2e15debba2c)
}

var fileDescriptor_4009e2e15debba2c = []byte{
	// 403 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x93, 0x51, 0x8b, 0x9b, 0x40,
	0x14, 0x85, 0x3b, 0xba, 0xba, 0xcd, 0x95, 0x58, 0x73, 0xd9, 0xc2, 0x34, 0x14, 0x36, 0x84, 0x5d,
	0x08, 0x85, 0x5a, 0x48, 0x5f, 0xca, 0xbe, 0x2d, 0xdb, 0x94, 0x42, 0xc1, 0x52, 0x93, 0xd0, 0xf6,
	0x29, 0xa8, 0x99, 0x84, 0xa1, 0xa9, 0xca, 0x38, 0x16, 0xf2, 0x53, 0xfa, 0x07, 0xfa, 0xdc, 0x9f,
	0x58, 0x9c, 0x31, 0x51, 0xd3, 0xec, 0x93, 0xe3, 0x39, 0xe7, 0x5e, 0x3f, 0x0f, 0x0a, 0x7d, 0x19,
	0x89, 0x2d, 0x93, 0x85, 0x9f, 0x8b, 0x4c, 0x66, 0x68, 0x27, 0x59, 0xba, 0xe1, 0xdb, 0xf1, 0x1f,
	0x13, 0xec, 0x85, 0x72, 0xd0, 0x05, 0x83, 0xaf, 0x29, 0x19, 0x91, 0x49, 0x2f, 0x34, 0xf8, 0x1a,
	0x11, 0x2e, 0xd2, 0xe8, 0x27, 0xa3, 0x86, 0x52, 0xd4, 0x19, 0x5f, 0x42, 0xaf, 0xba, 0x16, 0x79,
	0x94, 0x30, 0x6a, 0x2a, 0xa3, 0x11, 0xf0, 0x16, 0xdc, 0xa2, 0x8c, 0x8b, 0x44, 0xf0, 0x98, 0x89,
	0x55, 0x29, 0x38, 0xbd, 0x50, 0x91, 0x7e, 0xa3, 0x2e, 0x05, 0xc7, 0x2f, 0x30, 0xd8, 0xf0, 0x9d,
	0x64, 0x62, 0x15, 0x49, 0x29, 0x78, 0x5c, 0x4a, 0x56, 0x50, 0x6b, 0x64, 0x4e, 0x9c, 0xe9, 0x8d,
	0xaf, 0xb9, 0x7c, 0xcd, 0xe4, 0x7f, 0x50, 0xb9, 0xfb, 0x63, 0x6c, 0x96, 0x4a, 0xb1, 0x0f, 0xbd,
	0xcd, 0x89, 0x8c, 0xaf, 0xc0, 0x2a, 0x64, 0x24, 0x19, 0xb5, 0x47, 0x64, 0xe2, 0x4e, 0xaf, 0x4e,
	0xd6, 0xcc, 0x2b, 0x2f, 0xd4, 0x11, 0xbc, 0x06, 0x47, 0x30, 0x29, 0xf6, 0x2b, 0x99, 0xe5, 0x3c,
	0xa1, 0x97, 0x0a, 0x11, 0x94, 0xb4, 0xa8, 0x14, 0x7c, 0x0d, 0xa8, 0x03, 0x35, 0x76, 0x2e, 0x79,
	0x96, 0xd2, 0xa7, 0x2a, 0x37, 0x50, 0xce, 0xbc, 0x65, 0x0c, 0x1f, 0xe0, 0xf9, 0x59, 0x4c, 0xf4,
	0xc0, 0xfc, 0xc1, 0xf6, 0x75, 0xa3, 0xd5, 0x11, 0xaf, 0xc0, 0xfa, 0x15, 0xed, 0xca, 0x43, 0xa7,
	0xfa, 0xe6, 0xce, 0x78, 0x47, 0xc6, 0xd7, 0x60, 0x29, 0x48, 0x74, 0xe0, 0x72, 0x19, 0x7c, 0x0a,
	0x3e, 0x7f, 0x0d, 0xbc, 0x27, 0xd8, 0x03, 0x2b, 0x9c, 0xdd, 0xbf, 0xff, 0xee, 0x91, 0xf1, 0x6f,
	0x02, 0x83, 0xe0, 0xd0, 0xf4, 0x5a, 0xbf, 0x57, 0x81, 0x77, 0x60, 0xa9, 0xfa, 0x29, 0xe9, 0xd6,
	0xf7, 0x5f, 0x52, 0x2b, 0xba, 0x3e, 0x3d, 0x32, 0xfc, 0x08, 0xd0, 0x88, 0x67, 0x60, 0x6f, 0xda,
	0xb0, 0xce, 0xd4, 0xed, 0x76, 0xda, 0x86, 0xff, 0x4b, 0xa0, 0x5f, 0x3f, 0xe7, 0x41, 0x65, 0x70,
	0x06, 0x70, 0xfc, 0x2c, 0x0e, 0x70, 0xb7, 0xdd, 0x05, 0x75, 0xb4, 0x41, 0xad, 0xe9, 0x5a, 0x83,
	0xc3, 0x6f, 0xf0, 0xec, 0xc4, 0x3e, 0xc3, 0xf9, 0xa6, 0xcb, 0xf9, 0xe2, 0xd1, 0x0e, 0x5a, 0xc8,
	0xb1, 0xad, 0x7e, 0x83, 0xb7, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xe3, 0xda, 0x5a, 0xad, 0x17,
	0x03, 0x00, 0x00,
}
