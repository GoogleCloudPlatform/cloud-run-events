// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package readiness

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// GenerationQueryServiceClient is the client API for GenerationQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GenerationQueryServiceClient interface {
	GetCellTenantGeneration(ctx context.Context, in *GetGenerationReq, opts ...grpc.CallOption) (*GetGenerationResp, error)
	GetTargetGeneration(ctx context.Context, in *GetGenerationReq, opts ...grpc.CallOption) (*GetGenerationResp, error)
}

type generationQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGenerationQueryServiceClient(cc grpc.ClientConnInterface) GenerationQueryServiceClient {
	return &generationQueryServiceClient{cc}
}

func (c *generationQueryServiceClient) GetCellTenantGeneration(ctx context.Context, in *GetGenerationReq, opts ...grpc.CallOption) (*GetGenerationResp, error) {
	out := new(GetGenerationResp)
	err := c.cc.Invoke(ctx, "/readiness.GenerationQueryService/GetCellTenantGeneration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generationQueryServiceClient) GetTargetGeneration(ctx context.Context, in *GetGenerationReq, opts ...grpc.CallOption) (*GetGenerationResp, error) {
	out := new(GetGenerationResp)
	err := c.cc.Invoke(ctx, "/readiness.GenerationQueryService/GetTargetGeneration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GenerationQueryServiceServer is the server API for GenerationQueryService service.
// All implementations must embed UnimplementedGenerationQueryServiceServer
// for forward compatibility
type GenerationQueryServiceServer interface {
	GetCellTenantGeneration(context.Context, *GetGenerationReq) (*GetGenerationResp, error)
	GetTargetGeneration(context.Context, *GetGenerationReq) (*GetGenerationResp, error)
	mustEmbedUnimplementedGenerationQueryServiceServer()
}

// UnimplementedGenerationQueryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGenerationQueryServiceServer struct {
}

func (UnimplementedGenerationQueryServiceServer) GetCellTenantGeneration(context.Context, *GetGenerationReq) (*GetGenerationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCellTenantGeneration not implemented")
}
func (UnimplementedGenerationQueryServiceServer) GetTargetGeneration(context.Context, *GetGenerationReq) (*GetGenerationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTargetGeneration not implemented")
}
func (UnimplementedGenerationQueryServiceServer) mustEmbedUnimplementedGenerationQueryServiceServer() {
}

// UnsafeGenerationQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GenerationQueryServiceServer will
// result in compilation errors.
type UnsafeGenerationQueryServiceServer interface {
	mustEmbedUnimplementedGenerationQueryServiceServer()
}

func RegisterGenerationQueryServiceServer(s grpc.ServiceRegistrar, srv GenerationQueryServiceServer) {
	s.RegisterService(&GenerationQueryService_ServiceDesc, srv)
}

func _GenerationQueryService_GetCellTenantGeneration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGenerationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenerationQueryServiceServer).GetCellTenantGeneration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/readiness.GenerationQueryService/GetCellTenantGeneration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenerationQueryServiceServer).GetCellTenantGeneration(ctx, req.(*GetGenerationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenerationQueryService_GetTargetGeneration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGenerationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenerationQueryServiceServer).GetTargetGeneration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/readiness.GenerationQueryService/GetTargetGeneration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenerationQueryServiceServer).GetTargetGeneration(ctx, req.(*GetGenerationReq))
	}
	return interceptor(ctx, in, info, handler)
}

// GenerationQueryService_ServiceDesc is the grpc.ServiceDesc for GenerationQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GenerationQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "readiness.GenerationQueryService",
	HandlerType: (*GenerationQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCellTenantGeneration",
			Handler:    _GenerationQueryService_GetCellTenantGeneration_Handler,
		},
		{
			MethodName: "GetTargetGeneration",
			Handler:    _GenerationQueryService_GetTargetGeneration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "query.proto",
}
