// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package control

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BrokerControlClient is the client API for BrokerControl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BrokerControlClient interface {
	WatchBrokers(ctx context.Context, in *WatchBrokersReq, opts ...grpc.CallOption) (BrokerControl_WatchBrokersClient, error)
}

type brokerControlClient struct {
	cc grpc.ClientConnInterface
}

func NewBrokerControlClient(cc grpc.ClientConnInterface) BrokerControlClient {
	return &brokerControlClient{cc}
}

func (c *brokerControlClient) WatchBrokers(ctx context.Context, in *WatchBrokersReq, opts ...grpc.CallOption) (BrokerControl_WatchBrokersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BrokerControl_serviceDesc.Streams[0], "/control.BrokerControl/WatchBrokers", opts...)
	if err != nil {
		return nil, err
	}
	x := &brokerControlWatchBrokersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BrokerControl_WatchBrokersClient interface {
	Recv() (*WatchBrokersResp, error)
	grpc.ClientStream
}

type brokerControlWatchBrokersClient struct {
	grpc.ClientStream
}

func (x *brokerControlWatchBrokersClient) Recv() (*WatchBrokersResp, error) {
	m := new(WatchBrokersResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BrokerControlServer is the server API for BrokerControl service.
// All implementations must embed UnimplementedBrokerControlServer
// for forward compatibility
type BrokerControlServer interface {
	WatchBrokers(*WatchBrokersReq, BrokerControl_WatchBrokersServer) error
	mustEmbedUnimplementedBrokerControlServer()
}

// UnimplementedBrokerControlServer must be embedded to have forward compatible implementations.
type UnimplementedBrokerControlServer struct {
}

func (*UnimplementedBrokerControlServer) WatchBrokers(*WatchBrokersReq, BrokerControl_WatchBrokersServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchBrokers not implemented")
}
func (*UnimplementedBrokerControlServer) mustEmbedUnimplementedBrokerControlServer() {}

func RegisterBrokerControlServer(s *grpc.Server, srv BrokerControlServer) {
	s.RegisterService(&_BrokerControl_serviceDesc, srv)
}

func _BrokerControl_WatchBrokers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchBrokersReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BrokerControlServer).WatchBrokers(m, &brokerControlWatchBrokersServer{stream})
}

type BrokerControl_WatchBrokersServer interface {
	Send(*WatchBrokersResp) error
	grpc.ServerStream
}

type brokerControlWatchBrokersServer struct {
	grpc.ServerStream
}

func (x *brokerControlWatchBrokersServer) Send(m *WatchBrokersResp) error {
	return x.ServerStream.SendMsg(m)
}

var _BrokerControl_serviceDesc = grpc.ServiceDesc{
	ServiceName: "control.BrokerControl",
	HandlerType: (*BrokerControlServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchBrokers",
			Handler:       _BrokerControl_WatchBrokers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/broker/control/control.proto",
}
