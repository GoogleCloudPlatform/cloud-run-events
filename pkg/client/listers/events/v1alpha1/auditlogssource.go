/*
Copyright 2019 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/google/knative-gcp/pkg/apis/events/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AuditLogsSourceLister helps list AuditLogsSources.
type AuditLogsSourceLister interface {
	// List lists all AuditLogsSources in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.AuditLogsSource, err error)
	// AuditLogsSources returns an object that can list and get AuditLogsSources.
	AuditLogsSources(namespace string) AuditLogsSourceNamespaceLister
	AuditLogsSourceListerExpansion
}

// auditLogsSourceLister implements the AuditLogsSourceLister interface.
type auditLogsSourceLister struct {
	indexer cache.Indexer
}

// NewAuditLogsSourceLister returns a new AuditLogsSourceLister.
func NewAuditLogsSourceLister(indexer cache.Indexer) AuditLogsSourceLister {
	return &auditLogsSourceLister{indexer: indexer}
}

// List lists all AuditLogsSources in the indexer.
func (s *auditLogsSourceLister) List(selector labels.Selector) (ret []*v1alpha1.AuditLogsSource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AuditLogsSource))
	})
	return ret, err
}

// AuditLogsSources returns an object that can list and get AuditLogsSources.
func (s *auditLogsSourceLister) AuditLogsSources(namespace string) AuditLogsSourceNamespaceLister {
	return auditLogsSourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AuditLogsSourceNamespaceLister helps list and get AuditLogsSources.
type AuditLogsSourceNamespaceLister interface {
	// List lists all AuditLogsSources in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.AuditLogsSource, err error)
	// Get retrieves the AuditLogsSource from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.AuditLogsSource, error)
	AuditLogsSourceNamespaceListerExpansion
}

// auditLogsSourceNamespaceLister implements the AuditLogsSourceNamespaceLister
// interface.
type auditLogsSourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AuditLogsSources in the indexer for a given namespace.
func (s auditLogsSourceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AuditLogsSource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AuditLogsSource))
	})
	return ret, err
}

// Get retrieves the AuditLogsSource from the indexer for a given namespace and name.
func (s auditLogsSourceNamespaceLister) Get(name string) (*v1alpha1.AuditLogsSource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("auditlogssource"), name)
	}
	return obj.(*v1alpha1.AuditLogsSource), nil
}
