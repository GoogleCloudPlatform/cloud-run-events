/*
Copyright 2019 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/google/knative-gcp/pkg/apis/events/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GCSLister helps list GCSs.
type GCSLister interface {
	// List lists all GCSs in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.GCS, err error)
	// GCSs returns an object that can list and get GCSs.
	GCSs(namespace string) GCSNamespaceLister
	GCSListerExpansion
}

// gCSLister implements the GCSLister interface.
type gCSLister struct {
	indexer cache.Indexer
}

// NewGCSLister returns a new GCSLister.
func NewGCSLister(indexer cache.Indexer) GCSLister {
	return &gCSLister{indexer: indexer}
}

// List lists all GCSs in the indexer.
func (s *gCSLister) List(selector labels.Selector) (ret []*v1alpha1.GCS, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GCS))
	})
	return ret, err
}

// GCSs returns an object that can list and get GCSs.
func (s *gCSLister) GCSs(namespace string) GCSNamespaceLister {
	return gCSNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GCSNamespaceLister helps list and get GCSs.
type GCSNamespaceLister interface {
	// List lists all GCSs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.GCS, err error)
	// Get retrieves the GCS from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.GCS, error)
	GCSNamespaceListerExpansion
}

// gCSNamespaceLister implements the GCSNamespaceLister
// interface.
type gCSNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GCSs in the indexer for a given namespace.
func (s gCSNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.GCS, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GCS))
	})
	return ret, err
}

// Get retrieves the GCS from the indexer for a given namespace and name.
func (s gCSNamespaceLister) Get(name string) (*v1alpha1.GCS, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("gcs"), name)
	}
	return obj.(*v1alpha1.GCS), nil
}
